---
title: Tag 1
author: Jannik
date: today
abstract: |
  This is our abstract.
keep-tex: true
execute:
  eval: true
  echo: true
  cache: true
  warning: false
---

# Morgenschiene

*Markdown* text.
**Bold**.

```{r}
1 + 1
```

```{r}
0 / 0
```

```{r}
1 * 10
```

```{r}
10 %/% 2
```

```{r}
10 %% 2
```

alt - -

```{r}
x <- 10
x = 10
```

```{r}
x <- 1:10
x + 1
```

```{r}
y <- x^2
y
```

```{r}
mean(x = y)
```

```{r}
library(palmerpenguins)
```

```{r}
#| eval: false
View(penguins)
```

```{r}
str(penguins)
```


```{r}
head(penguins$species)
```

```{r}
library(tidyverse)
```

```{r}
add_one <- function(x) {
  x + 1
}
```

ctrl + shift + M

```{r}
x %>% add_one() %>% sum()
```

```{r}
x %>% add_one() %>% sum()
```

```{r}
add_this <- function(x, y) {
  x + y
}
```

```{r}
x |> add_this(10)
x %>% add_this(x = 10, y = .)
```

```{r}
x |> (\(x) x + 1)()
```

```{r}
add_one = \(x) + 1
```

```{r}
x |> 
  (function(x) {x + 1})()
```

Grammar of Graphics

<https://ggplot2.tidyverse.org/>

```{r}
x <- 1:10
x > 5
```
```{r}
c(1, 3, 2, 3)
```


```{r}
#| label: fig-penguin-plot
#| fig-cap: Linear regression on penguin data.
plt <- penguins |> 
  drop_na() |> 
  ggplot(aes(flipper_length_mm, body_mass_g, shape = sex, color = species)) +
  geom_point() +
  theme_minimal() +
  theme(
    legend.title = element_text(face = "bold")
  ) +
  geom_smooth(method = "lm", se = FALSE, aes(group = species)) +
  scale_x_continuous(limits = c(180, 200))
  # lims(x = c(180, 200)) +
  # coord_cartesian(xlim = c(180, 200))

plt
```

Hey, look at @fig-penguin-plot!


```{r}
penguins |> 
  drop_na() |>
  ggplot(aes(sex, body_mass_g)) +
  geom_violin() +
  ggbeeswarm::geom_quasirandom()
```


Is there a relationship between flipper length and body mass?
How is this influenced by sex and species?
Experiment with different visualizations!

```{r}
penguins |> 
  select(species, island, bill_length_mm)
```

```{r}
penguins |> 
  select(-species)
```

```{r}
penguins |> 
  select(starts_with("bill"))
```

```{r}
penguins |> 
  mutate(
    new_column = bill_length_mm * 10,
    new_column2 = bill_length_mm - bill_depth_mm
  ) |> 
  select(starts_with("new"), everything())
```

```{r}
penguins |> 
  summarise(
    hello = mean(bill_length_mm, na.rm = TRUE)
  )
```

```{r}
penguins |> 
  group_by(species) |> 
  summarise(
    m = mean(bill_length_mm, na.rm = TRUE)
  ) |> 
  ungroup()
```

# Nachmittagsschiene

## Resources

- <https://jmbuhr.de/dataintro/resources.html>
- <https://quarto.org/>
- <https://posit.co/resources/cheatsheets/>
- <https://r4ds.had.co.nz/>

## Overview

![Source: <https://r4ds.had.co.nz/>](img/2022-12-28-14-35-32.png)

- `readr`
- `tidyr`
- `dplyr`
- `ggplot2`
- `tidymodels`

### Readr

```{r}
path <- "./data/02/gapminder.csv"
read_lines(path, n_max = 10)
```

```{r}
read_csv(path)
```

```{r}
readxl::read_xlsx("./data/02/gapminder.xlsx")
```

```{r}
read_tsv("./data/02/gapminder_tsv.txt") |> 
  mutate(year = as.integer(year)) |> 
  mutate(year = paste(as.character(year), "hello" )) |> 
  mutate(year = parse_number(year))
```

```{r}
read_tsv("./data/02/gapminder_tsv.txt") |> 
  mutate(year = as.character(year),
         decade = str_sub(year, 1, 2),
         year = str_sub(year, 2, 3)
         ) |> 
  select(decade, year, everything()) |> 
  unite("year", decade, year, sep = "") |> 
  mutate(year = parse_number(year))
```


```{r}
read_delim("./data/02/obscure_file.tsv", delim = "~")
```

```{r}
read_csv("./data/02/gapminder_messier.csv", comment = "#", skip = 2)
```

### Tidyr

```{r}
table1
```

```{r}
table2
```

```{r}
table2 |> 
  pivot_wider(names_from = type,
              values_from = count)
```

```{r}
table3 |> 
  separate(rate, c("cases", "population")) |> 
  # mutate(across( c(cases, population), parse_number))
  mutate(across(where(is.character), parse_guess))
```

```{r}
table4a
```


```{r}
table4b
```

```{r}
left_join(table4a, table4b, by = c("country"),
          suffix = c("_cases", "_pop")) |> 
  pivot_longer(-country) |> 
  separate(name, c("year", "type")) |> 
  pivot_wider(names_from = type, values_from = value)
```
```{r}
left_join(table4a, table4b, by = c("country"),
          suffix = c("_cases", "_pop")) |> 
  pivot_longer(-country, names_sep = "_",
               names_to = c("year", "type"))
```

```{r}
table5 |> 
  unite("year", century, year, sep = "") |> 
  mutate(year = parse_integer(year))
```

```{r}
sort_of_an_array <- expand_grid(x = 1:10, y = x, z = x) |> 
  mutate(value = rnorm(n()))
```


```{r}
sort_of_an_array |> 
  group_by(x, y) |> 
  summarise(mean(value))
```

### Dplyr

```{r}
library(gapminder)
```

```{r}
gapminder |> 
  select(country)
```

```{r}
gapminder |> 
  filter(
    country == "Afghanistan",
    year == 1957 | year == 1952
  )
```


```{r}
gapminder |> 
  group_by(continent) |>
  filter(lifeExp == max(lifeExp))
```

- rowwise

```{r}
gapminder |> 
  rowwise()
```
```{r}
df <- tibble(x = runif(6), y = runif(6), z = runif(6))

df |>
  rowwise() |>
  mutate(m = mean(c(x, y, z)))
```

```{r}
df |> 
  mutate(m = (x + y + z) / 3 )
```

```{r}
df |> 
  mutate(id = 1:n()) |> 
  pivot_longer(-id) |> 
  group_by(id) |>
  summarise(mean(value))
```


```{r}
palmerpenguins::penguins |> 
  group_by(species) |> 
  summarise(m = mean(bill_length_mm, na.rm = TRUE))
```


### Questions

- tidy evaluation / programming with dplyr

```{r}
some_country <- "Argentina"

gapminder |> 
  filter(country == some_country)
```

<https://dplyr.tidyverse.org/articles/programming.html>

```{r}
#| error: true
some_column <- "country"

gapminder |> 
  group_by(some_column)
```

```{r}
our_count <- function(data, column) {
  data |> 
    group_by({{column}}) |> 
    summarise(n = n())
}

our_count(gapminder, country)
```

```{r}
our_count2 <- function(data, column) {
  column_sym <- sym(column)
  data |> 
    group_by(column = eval(column_sym)) |> 
    summarise(n = n())
}

our_count2(gapminder, "country")
```


### ggglot2

and forcats

```{r}
#| fig-height: 12
#| fig-width: 6
#| fig-dpi: 300
plt <- gapminder |> 
  filter(year == max(year)) |> 
  mutate(
    country = fct_reorder(country, lifeExp)
  ) |>
  ggplot(aes(lifeExp, country, text = country)) +
  geom_point()

plt
```

```{r}
plotly::ggplotly(plt)
```


```{r}
gapminder |> 
  filter(year == max(year)) |> 
  slice_max(lifeExp, n = 10) |> 
  mutate(
    country = fct_reorder(country, lifeExp)
  ) |>
  ggplot(aes(lifeExp, country)) +
  geom_col()
```

```{r}
theme_set(theme_bw())

gapminder |> 
  filter(year == max(year)) |> 
  ggplot(aes(continent, pop, fill = country)) +
  geom_col(position = position_dodge(preserve = "single")) +
  scale_fill_manual(values = country_colors) +
  guides(fill = "none") +
  scale_y_continuous(labels = scales::label_number(),
                     n.breaks = 10)
```

```{r}
scales::label_number()
```


- geom_col / bar, other geoms



